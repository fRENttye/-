import random
import logging
import requests
import datetime
import html
import pylast
from aiogram import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from deep_translator import GoogleTranslator
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from googletrans import Translator

API_TOKEN = "7353125454:AAHIEN3FlgcJcjkdodkPjt7QEowOwqS4Lok"
KINOPOISK_TOKEN = "YH6CRVH-XNP4VHG-KFP5X4P-F5W9VM8", "ATN6000-G704F9D-KQCZT3E-KTH37YZ"
GOOGLE_API_KEY = "AIzaSyCx89KE_DA4nU_z7iF9NcoH_JQ8nuFT54E"
BASE_URL = "https://www.googleapis.com/books/v1/volumes"
open_weather_token = "e3cccd7d4cd9548c698de530fd4115d4"
API_KEY = "1b05b79dcbb6ccee0b0f744f181b440f"
API_SECRET = "a9e2240cc9f797e685b3d74d495febb1"

logging.basicConfig(level=logging.INFO)  # –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ INFO –∏ –≤—ã—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, WARNING, ERROR, CRITICAL) –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è.

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
network = pylast.LastFMNetwork(api_key=API_KEY, api_secret=API_SECRET)

bot = Bot(token=API_TOKEN, parse_mode="HTML")  # —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∞ HTML.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)  # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Dispatcher, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Ö –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.

LANGUAGES = ["ru", "en", "fr", "es"]

WORD_TRANSLATIONS = {
    "—Ñ—ç–Ω—Ç–µ–∑–∏": "fantasy",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤": "mystery",
    "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "science fiction",
    "—É–∂–∞—Å—ã": "horror",
    "—Ä–æ–º–∞–Ω": "romance",
    "–∏—Å—Ç–æ—Ä–∏—è": "history",
    "–±–∏–æ–≥—Ä–∞—Ñ–∏—è": "biography",
    "–Ω–∞—É–∫–∞": "science",
    "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è": "psychology",
    "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": "philosophy",
    "–∏—Å–∫—É—Å—Å—Ç–≤–æ": "art",
    "–∫–æ–º–∏–∫—Å—ã": "comics",
    "–ø–æ—ç–∑–∏—è": "poetry",
    "–†—É—Å—Å–∫–∏–π": 'ru',
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "fr",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "es",
    "–†–∞–Ω–¥–æ–º": "random",
}

TRANSLATIONS_GENRE = {
    "—Ä–æ–∫": "rock",
    "—Ö–∏–ø-—Ö–æ–ø":"hip-hop",
    "–∏–Ω–¥–∏":"indie",
    "—Ä—ç–ø":"rap",
    "–º–µ—Ç–∞–ª":"metal",
    "–∫–ª–∞—Å—Å–∏–∫–∞":"classical",
    "—Ö–∞—Ä–¥–∫–æ—Ä":"hardcore",
    "–¥–∂–∞–∑":"jazz",
    "—Ä–µ–≥–≥–∏":"reggae",
    "–ø–∞–Ω–∫":"punk"
}

search_requests = ["–ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥–∞–º", "–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º", "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"]
genres = ["–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–±–æ–µ–≤–∏–∫", "—Ç—Ä–∏–ª–ª–µ—Ä",]
years = ["90–µ-00—ã–µ", "00—ã–µ-10—ã–µ", "10—ã–µ-–Ω–∞—à–µ –≤—Ä–µ–º—è"]
start_commands = ["–ü–æ–≥–æ–¥–∞", "–§–∏–ª—å–º—ã", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫","–ö–Ω–∏–≥–∏","–ú—É–∑—ã–∫–∞"]
books_main_buttons = ["–ü–æ –∂–∞–Ω—Ä–∞–º", "–ü–æ –≥–æ–¥–∞–º","—Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞"]
back_button = ["–ù–∞–∑–∞–¥"]
buttons = ['–†—É—Å—Å–∫–∏–π', 'English', 'Fran√ßais', 'Espa√±ol']
BOOKS_BUTTONS = list(WORD_TRANSLATIONS.keys())[:13]
MUSIC_BUTTONS = list(TRANSLATIONS_GENRE.keys())
MUSIC_BUTTONS_TYPES = ["–ø–æ –∂–∞–Ω—Ä—É", "–ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"]
books_languages_buttons = ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "–†–∞–Ω–¥–æ–º"]


user_languages = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã
class GetInfo(StatesGroup):
    city = State()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º—É–∑—ã–∫–∏
class MusicSearch(StatesGroup):
    music = State()
    choose = State()
    artist = State()
    lyrics = State()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥
class BookSearch(StatesGroup):
    choice = State()  # –í—ã–±–æ—Ä –º–µ–∂–¥—É "–ü–æ –∂–∞–Ω—Ä–∞–º" –∏ "–ü–æ –≥–æ–¥–∞–º"
    genre = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∂–∞–Ω—Ä–∞
    language_by_genre = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —è–∑—ã–∫–∞ "–ü–æ –∂–∞–Ω—Ä–∞–º"
    language_by_year = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —è–∑—ã–∫–∞ "–ü–æ –≥–æ–¥–∞–º"
    year_range = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ–¥–∞
    random_book = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ –∂–∞–Ω—Ä—É
def get_random_track_by_genre(genre: str):
    try:
        tag = network.get_tag(genre)
        top_tracks = tag.get_top_tracks(limit=100)
        if not top_tracks:
            return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É '{genre}'"

        random_track = random.choice(top_tracks)
        track = random_track.item
        artist = track.get_artist()

        track_name = track.get_title()
        artist_name = artist.get_name()
        album = track.get_album()
        album_name = album.get_title() if album else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º"
        playcount = track.get_playcount() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        track_url = track.get_url()

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∞–ª—å–±–æ–º–∞
        album_cover_url = album.get_cover_image() if album else None

        result = (f"*–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è!*\n"
                  f"*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {artist_name}\n"
                  f"*–¢—Ä–µ–∫:* {track_name}\n"
                  f"*–ê–ª—å–±–æ–º:* {album_name}\n"
                  f"*–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π:* {playcount}\n"
                  f"*–°–ª—É—à–∞—Ç—å:* [Last.fm]({track_url})")

        return result,album_cover_url

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É
def get_random_track_by_artist(genre: str, artist_name):
    try:
        artist = network.get_artist(artist_name)
        top_tracks2 = artist.get_top_tracks(limit=10)
        if not top_tracks2:
            return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É '{artist_name}'"

        random_track2 = random.choice(top_tracks2)
        track = random_track2.item
        track_name = track.get_title()
        album = track.get_album()
        album_name = album.get_title() if album else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º"
        playcount = track.get_playcount() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        track_url = track.get_url()

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∞–ª—å–±–æ–º–∞
        album_cover_url = album.get_cover_image() if album else None

        result = (f"üé∂ *–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è!*\n"
                  f"üî• *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {artist_name}\n"
                  f"üéµ *–¢—Ä–µ–∫:* {track_name}\n"
                  f"üíø *–ê–ª—å–±–æ–º:* {album_name}\n"
                  f"üìÖ *–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π:* {playcount}\n"
                  f"üéß *–°–ª—É—à–∞—Ç—å:* [Last.fm]({track_url})")

        return result,album_cover_url

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, user_id, to_lang=None):
    if not to_lang:
        to_lang = user_languages.get(user_id, 'ru')
    try:
        translator = GoogleTranslator(source='auto', target=to_lang)
        translation = translator.translate(text)
        return translation
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}"


def translate_text_for_books(text, target_language="ru"):
    translator = Translator()
    try:
        translated = translator.translate(text, dest=target_language)
        return translated.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É
def get_random_book_by_genre(genre, language="ru"):
    genre = WORD_TRANSLATIONS.get(genre.lower(), genre)  # –ü–µ—Ä–µ–≤–æ–¥ –∂–∞–Ω—Ä–∞

    params = {
        "q": f"subject:{genre}",
        "maxResults": 40,
        "printType": "books",
        "langRestrict": language,
        "key": GOOGLE_API_KEY
    }

    response = requests.get(BASE_URL, params=params)

    if response.status_code == 200:
        data = response.json()
        books = data.get("items", [])

        if books:
            book = random.choice(books)
            volume_info = book.get("volumeInfo", {})

            title = volume_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            authors = ", ".join(volume_info.get("authors", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"]))
            description = volume_info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            link = volume_info.get("infoLink", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            image_links = volume_info.get("imageLinks", {})
            thumbnail = image_links.get("thumbnail", None)

            # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∞–≤—Ç–æ—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            if language != "ru":
                title = translate_text_for_books(title, target_language="ru")
                authors = translate_text_for_books(authors, target_language="ru")
                if description != "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                    description = translate_text_for_books(description, target_language="ru")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (f" <b>{html.escape(title)}</b>\n"
                       f" <i>{html.escape(authors)}</i>\n"
                       f" {html.escape(description[:500])}...\n"
                       f" <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if thumbnail:
                message = f"<a href='{thumbnail}'>‚Äã</a>\n" + message

            return message
        else:
            logging.warning(f"No books found for genre: {genre} and language: {language}")
            return f" –ö–Ω–∏–≥ –≤ –∂–∞–Ω—Ä–µ <b>{genre}</b> –Ω–∞ —è–∑—ã–∫–µ <b>{language}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        logging.error(f"API Error {response.status_code}: {response.text}")
        return f"–û—à–∏–±–∫–∞: {response.status_code}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ —è–∑—ã–∫—É
def get_random_book_by_year(year_range,genre, language="ru"):
    params = {
        "q": f"subject:{genre}",
        "maxResults": 40,
        "printType": "books",
        "langRestrict": language,
        "filter": "free-ebooks",
        "key": GOOGLE_API_KEY
    }
    response = requests.get(BASE_URL, params=params)

    if response.status_code == 200:
        data = response.json()
        books = data.get("items", [])

        if books:
            book = random.choice(books)
            volume_info = book.get("volumeInfo", {})

            title = volume_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            authors = ", ".join(volume_info.get("authors", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"]))
            description = volume_info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            link = volume_info.get("infoLink", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")

            image_links = volume_info.get("imageLinks", {})
            thumbnail = image_links.get("thumbnail", None)

            if params.get("langRestrict") != "ru":
                title = translate_text_for_books(title, target_language="ru")
                authors = translate_text_for_books(authors, target_language="ru")
                if description != "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                    description = translate_text_for_books(description, target_language="ru")

            message = (f" <b>{html.escape(title)}</b>\n"
                       f" <i>{html.escape(authors)}</i>\n"
                       f" {html.escape(description[:500])}...\n"
                       f" <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

            if thumbnail:
                message = f"<a href='{thumbnail}'>‚Äã</a>\n" + message

            return message
        else:
            return "–ö–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        logging.error(f"API Error {response.status_code}: {response.text}")
        return f"–û—à–∏–±–∫–∞: {response.status_code}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ —è–∑—ã–∫—É
def get_random_book(genre, language="ru"):
    genre = WORD_TRANSLATIONS.get(genre.lower(), genre)  # –ü–µ—Ä–µ–≤–æ–¥ –∂–∞–Ω—Ä–∞

    params = {
        "q": f"subject:{genre}",
        "maxResults": 40,
        "printType": "books",
        "langRestrict": language,
        "key": GOOGLE_API_KEY
    }

    response = requests.get(BASE_URL, params=params)

    if response.status_code == 200:
        data = response.json()
        books = data.get("items", [])

        if books:
            book = random.choice(books)
            volume_info = book.get("volumeInfo", {})

            title = volume_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            authors = ", ".join(volume_info.get("authors", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"]))
            description = volume_info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            link = volume_info.get("infoLink", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            image_links = volume_info.get("imageLinks", {})
            thumbnail = image_links.get("thumbnail", None)

            # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∞–≤—Ç–æ—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            if language != "ru":
                title = translate_text_for_books(title, target_language="ru")
                authors = translate_text_for_books(authors, target_language="ru")
                if description != "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                    description = translate_text_for_books(description, target_language="ru")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (f" <b>{html.escape(title)}</b>\n"
                       f" <i>{html.escape(authors)}</i>\n"
                       f" {html.escape(description[:500])}...\n"
                       f" <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if thumbnail:
                message = f"<a href='{thumbnail}'>‚Äã</a>\n" + message

            return message
        else:
            logging.warning(f"No books found for genre: {genre} and language: {language}")
            return f" –ö–Ω–∏–≥ –≤ –∂–∞–Ω—Ä–µ <b>{genre}</b> –Ω–∞ —è–∑—ã–∫–µ <b>{language}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        logging.error(f"API Error {response.status_code}: {response.text}")
        return f"–û—à–∏–±–∫–∞: {response.status_code}"


def random_token():
    return random.choice(KINOPOISK_TOKEN)


"""
—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ö–∏–Ω–æ–ü–æ–∏—Å–∫–æ–º

"""


def build_and_execute_request(limit, genre_name, selectFields, notNullFields):
    base_url = "https://api.kinopoisk.dev/v1.4/movie/random"
    params = f"token={random_token()}&limit={limit}&genres.name={genre_name}"
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    limit: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    genre_name: —Ç–∏–ø –∂–∞–Ω—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    selectFields: —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö API
    notNullFields: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ selectFields, –Ω–æ –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    base_url: –∑–∞–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    params: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    token={random_token()}: –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é random_token(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    limit={limit}: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    genres.name={genre_name}: —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏ –∂–∞–Ω—Ä–∞
    """
    if selectFields:
        for field in selectFields:
            params += f"&selectFields={field}"
    if notNullFields:
        for field in notNullFields:
            params += f"&notNullFields={field}"
    url = f"{base_url}?{params}"
    print(url)
    """
    –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç URL-–∞–¥—Ä–µ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–æ–≤ selectFields –∏ notNullFields.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è selectFields –Ω–µ –ø—É—Å—Ç–∞ (—Ç–æ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã), —Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä selectFields –∫ —Å—Ç—Ä–æ–∫–µ params.
    –µ—Å–ª–∏ notNullFields –Ω–µ –ø—É—Å—Ç, —Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä notNullFields –≤ params.
    —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ URL, –≥–¥–µ base_url ‚Äî —ç—Ç–æ –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å
    """

    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
            return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None


"""
–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
response = requests.get(url): –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP GET-–∑–∞–ø—Ä–æ—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π response.
if response.status_code == 200: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å. –°—Ç–∞—Ç—É—Å –∫–æ–¥ 200 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏ —Ä–µ—Å—É—Ä—Å –Ω–∞–π–¥–µ–Ω
return response.json(): –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä—å Python)
print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}"): –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞.
return None: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —á—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –Ω–µ—É–¥–∞—á–µ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
except Exception as e: –ë–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –±–ª–æ–∫–µ try
print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") - –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏ —Ç.–¥.)
return None: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
"""


async def get_random_movies_by_genre_sync(genre: str) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ —Å —Ç—Ä–µ–π–ª–µ—Ä–æ–º.
    :param genre: –ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞
    :return: –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏ –µ–≥–æ –ø–æ—Å—Ç–µ—Ä
    """

    limit = 10
    selectFields = ["name", "description", "year", "poster", "videos"]
    notNullFields = ["videos.trailers.url"]

    response = build_and_execute_request(limit, genre, selectFields, notNullFields)

    if response:  # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è response —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        trailer_url = "No trailer available"  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è trailer_url —Å –Ω–∞—á–∞–ª—å–Ω–º –∑–Ω–∞—á–µ–Ω–∏–µ–º "No trailer available"
        if (
                "videos" in response
                and "trailers" in response["videos"]
                and response["videos"]["trailers"]
        ):
            trailer_url = response["videos"]["trailers"][0].get(
                "url", "No trailer available"
            )
            trailer_name = response["videos"]["trailers"][0].get(
                "name", "No trailer available"
            )
            """
            –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –≤ response —Ä–∞–∑–¥–µ–ª—ã "videos" –∏ "trailers", –∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –ª–∏ –≤ trailers –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ.
            –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–µ—Ä—ã –µ—Å—Ç—å, —Ç–æ –æ–Ω –∏–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–π–ª–µ—Ä–∞. –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "No trailer available".
            """
        genres = ", ".join(genre["name"] for genre in response["genres"])
        # —Å—Ç—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∂–∞–Ω—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ response["genres"]. –ö–∞–∂–¥–æ–µ –∏–º—è –∂–∞–Ω—Ä–∞ –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –∑–∞–ø—è—Ç–æ–π
        description = response["description"]
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        formatted_movie = f"""<b>{response['name']} ({response['year']})</b>
[{genres}]

{description[:800]}     


<b>–¢—Ä–µ–π–ª–µ—Ä:</b> <a href='{trailer_url}'>{trailer_name}</a> """  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–π–ª–µ—Ä —Ñ–∏–ª—å–º–∞
        return formatted_movie, response.get("poster", {}).get("url",
                                                               "")  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É formatted_movie –∏ URL –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return None, None


"""
<b>{response['name']} ({response['year']})</b>: –í —ç—Ç–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∏–ª—å–º–∞ (response['name']) –∏ –≥–æ–¥ –µ–≥–æ –≤—ã–ø—É—Å–∫–∞ (response['year']). 
–≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –≤ HTML-—Ç–µ–≥–∏ <b>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∏—Ö –∂–∏—Ä–Ω—ã–º–∏
[{genres}]: –≠—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞, –∏ –æ–Ω–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫—É
{description[:800]}: –±–µ—Ä–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –∫ —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤
trailer_url: —ç—Ç–æ URL —Ç—Ä–µ–π–ª–µ—Ä–∞
trailer_name: —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
"""


async def get_random_movies_by_year_range_sync(year_range: str) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤ —Å —Ç—Ä–µ–π–ª–µ—Ä–æ–º.
    :param year_range: –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "90–µ-00—ã–µ")
    :return: –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏ –µ–≥–æ –ø–æ—Å—Ç–µ—Ä
    """
    limit = 10
    selectFields = ["name", "description", "year", "poster", "videos"]
    notNullFields = ["videos.trailers.url"]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
    year_ranges = {
        "90–µ-00—ã–µ": "1990-1999",
        "00—ã–µ-10—ã–µ": "2000-2009",
        "10—ã–µ-–Ω–∞—à–µ –≤—Ä–µ–º—è": "2010-2024",
    }
    years = year_ranges.get(year_range, "1990-2024")

    response = build_and_execute_request_for_years(
        limit, years, selectFields, notNullFields
    )

    if response:
        trailer_url = "No trailer available"
        if (
                "videos" in response
                and "trailers" in response["videos"]
                and response["videos"]["trailers"]
        ):
            trailer_url = response["videos"]["trailers"][0].get(
                "url", "No trailer available"
            )
            trailer_name = response["videos"]["trailers"][0].get(
                "name", "No trailer available"
            )

        genres = ", ".join(genre["name"] for genre in response["genres"])

        description = response["description"]

        formatted_movie = f"""<b>{response['name']} ({response['year']})</b>
[{genres}]

{description[:800]}

<b>–¢—Ä–µ–π–ª–µ—Ä:</b> <a href='{trailer_url}'>{trailer_name}</a> """
        return formatted_movie, response.get("poster", {}).get("url", "")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return None, None


def build_and_execute_request_for_years(limit, years, selectFields, notNullFields):
    base_url = "https://api.kinopoisk.dev/v1.4/movie/random"
    params = f"token={random_token()}&limit={limit}&year={years}"
    """

    """
    if selectFields:
        for field in selectFields:
            params += f"&selectFields={field}"

    if notNullFields:
        for field in notNullFields:
            params += f"&notNullFields={field}"

    url = f"{base_url}?{params}"
    print(url)

    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_commands)
    await message.answer("–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç? \n–ú–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '–ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞' —Ñ–∏–ª—å–º—ã \n–î–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã \n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —á–µ—Ç—ã—Ä—ë—Ö —è–∑—ã–∫–æ–≤ \n–ú–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'Google books' –∫–Ω–∏–≥–∏", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –º—É–∑—ã–∫–µ
@dp.message_handler(lambda message: message.text.lower() == "–º—É–∑—ã–∫–∞")
async def create_keyboard_music(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*MUSIC_BUTTONS_TYPES, *back_button)  # –î–æ–±–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏:", reply_markup=keyboard)
    await MusicSearch.choose.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
@dp.message_handler(state=MusicSearch.choose)
async def music_criteria(message: types.Message, state: FSMContext):
    choice = message.text.strip().lower()

    if choice == "–Ω–∞–∑–∞–¥":
        await send_welcome(message)
        await state.finish()
        return

    if choice == "–ø–æ –∂–∞–Ω—Ä—É":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*MUSIC_BUTTONS, *back_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        await MusicSearch.music.set()

    elif choice == "–ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*back_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=keyboard)
        await MusicSearch.artist.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")


@dp.message_handler(state=MusicSearch.music)
async def music_by_genre(message: Message, state: FSMContext):
    genre = message.text.strip().lower()

    if genre == "–Ω–∞–∑–∞–¥":
        await create_keyboard_music(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É "–ø–æ –∂–∞–Ω—Ä—É" –∏–ª–∏ "–ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"
        return

    if genre not in MUSIC_BUTTONS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    result, album_cover_url = get_random_track_by_genre(TRANSLATIONS_GENRE[genre])


    if album_cover_url:
        await message.answer_photo(album_cover_url)

    await message.answer(result)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*MUSIC_BUTTONS, *back_button)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", reply_markup=keyboard)

    await MusicSearch.music.set()


@dp.message_handler(state=MusicSearch.artist)
async def music_by_artist(message: Message, state: FSMContext):
    artist_name = message.text.strip()

    if artist_name.lower() == "–Ω–∞–∑–∞–¥":
        await create_keyboard_music(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        return

    result, album_cover_url = get_random_track_by_artist("–∂–∞–Ω—Ä", artist_name)

    if album_cover_url:
        await message.answer_photo(album_cover_url)

    await message.answer(result)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*back_button)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", reply_markup=keyboard)

    await MusicSearch.artist.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–Ω–∏–≥–∞—Ö
@dp.message_handler(lambda c: c.text.startswith("–ö–Ω–∏–≥–∏"))
async def create_keyboard_books(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –§–∏–ª—å–º—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*books_main_buttons,*back_button)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏:", reply_markup=keyboard)
    await BookSearch.choice.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(state=BookSearch.choice)
async def choose_search_criteria(message: Message, state: FSMContext):
    choice = message.text.strip().lower()

    if choice == "–Ω–∞–∑–∞–¥":
        await send_welcome(message)
        await state.finish()
        return
    if choice == "–ø–æ –∂–∞–Ω—Ä–∞–º":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*BOOKS_BUTTONS, *back_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        await BookSearch.genre.set()
    elif choice == "—Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞":
        await BookSearch.random_book.set()
        await random_book(message)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é
    elif choice == "–ø–æ –≥–æ–¥–∞–º":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*years, *back_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:", reply_markup=keyboard)
        await BookSearch.year_range.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: '–ü–æ –∂–∞–Ω—Ä–∞–º', '–ü–æ –≥–æ–¥–∞–º' –∏–ª–∏ '–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞' .")


#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏
@dp.message_handler(state=BookSearch.random_book)
async def random_book(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É.")

    genre = random.choice(list(WORD_TRANSLATIONS.values())[:13])
    language = random.choice(LANGUAGES)

    logging.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä: {genre}, —è–∑—ã–∫: {language}")

    result = get_random_book(genre, language)

    if not result:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è –∂–∞–Ω—Ä–∞ <b>{genre}</b> –Ω–∞ —è–∑—ã–∫–µ <b>{language}</b>.",
            parse_mode="HTML")
    else:
        await message.answer(f"–ñ–∞–Ω—Ä: <b>{genre}</b>\n–Ø–∑—ã–∫: <b>{language}</b>\n\n{result}",
                             parse_mode="HTML",
                             disable_web_page_preview=False)

    await BookSearch.choice.set()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*books_main_buttons, *back_button)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏:", reply_markup=keyboard)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞
@dp.message_handler(state=BookSearch.genre)
async def get_genre(message: Message, state: FSMContext):
    genre = message.text.strip().lower()

    if genre == "–Ω–∞–∑–∞–¥":
        await create_keyboard_books(message, state)
        return
    if genre not in WORD_TRANSLATIONS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*books_languages_buttons, *back_button)
    await state.update_data(genre=genre)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–Ω–∏–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞–Ω–¥–æ–º' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞:", reply_markup=keyboard)
    await BookSearch.language_by_genre.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
@dp.message_handler(state=BookSearch.language_by_genre)
async def get_language(message: Message, state: FSMContext):
    user_data = await state.get_data()
    genre = user_data["genre"]
    language = message.text.strip()

    if language == "–ù–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*BOOKS_BUTTONS, *back_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        await BookSearch.genre.set()
        return
    if language.capitalize() not in WORD_TRANSLATIONS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    if language == "–†–∞–Ω–¥–æ–º":
        language = random.choice(LANGUAGES)
    else:
        language = WORD_TRANSLATIONS[language.capitalize()]

    result = get_random_book_by_genre(genre, language)
    await message.answer(f"–ñ–∞–Ω—Ä: <b>{genre}</b>\n–Ø–∑—ã–∫: <b>{language}</b>\n\n{result}",
                         parse_mode="HTML",
                         disable_web_page_preview=False)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*BOOKS_BUTTONS,*back_button)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é.", reply_markup=keyboard)

    await BookSearch.genre.set()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥–∞–º
@dp.message_handler(state=BookSearch.year_range)
async def get_year_range(message: Message, state: FSMContext):
    year_range = message.text.strip()

    if year_range == "–ù–∞–∑–∞–¥":
        await create_keyboard_books(message, state)
        return
    if year_range not in years:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*books_languages_buttons, *back_button)
    await state.update_data(year_range=year_range)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–Ω–∏–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞–Ω–¥–æ–º' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞:", reply_markup=keyboard)
    await BookSearch.language_by_year.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥–∞–º
@dp.message_handler(state=BookSearch.language_by_year)
async def get_language_by_year(message: Message, state: FSMContext):
    user_data = await state.get_data()
    year_range = user_data.get("year_range", "")
    language = message.text.strip()

    if language == "–ù–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*years, *back_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:", reply_markup=keyboard)
        await BookSearch.year_range.set()
        return
    if language not in WORD_TRANSLATIONS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    if language == "–†–∞–Ω–¥–æ–º":
        language = random.choice(LANGUAGES)
    else:
        language = WORD_TRANSLATIONS[language.capitalize()]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä
    genre = random.choice(list(WORD_TRANSLATIONS.values())[:13])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if year_range == "90-–µ - 00-–µ":
        date_range = "1990-2000"
    elif year_range == "00-–µ - 10-–µ":
        date_range = "2000-2010"
    else:
        date_range = "2010-2025"

    result = get_random_book_by_year(year_range, genre, language)
    await message.answer(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: <b>{year_range}</b>\n–ñ–∞–Ω—Ä: <b>{genre}</b>\n–Ø–∑—ã–∫: <b>{language}</b>\n\n{result}",
                         parse_mode="HTML",
                         disable_web_page_preview=False)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*years, *back_button)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é:", reply_markup=keyboard)
    await BookSearch.year_range.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∏–ª—å–º–∞—Ö
@dp.message_handler(lambda c: c.text.startswith("–§–∏–ª—å–º—ã"))
async def create_keyboard_kino(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.add(*search_requests, "‚Ü© –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)


@dp.message_handler(lambda c: c.text.startswith("–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º"))
async def process_callback_button(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.add(*genres, "‚Ü© –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=keyboard)


@dp.message_handler(lambda c: c.text.startswith("–ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥–∞–º"))
async def process_callback_button(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.add(*years, "‚Ü© –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ–¥—ã –≤—ã–ø—É—Å–∫–∞:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–≥–æ–¥–µ
@dp.message_handler(lambda c: c.text.startswith('–ü–æ–≥–æ–¥–∞'))
async def weather_base(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!", reply_markup=keyboard)
    await GetInfo.city.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=GetInfo.city)
async def city_handler(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é
        await state.finish()
        return await send_welcome(message)

    async with state.proxy() as data:
        data['city'] = message.text

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={data['city']}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.reply(
            f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
            f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ?\n"
            f'–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â—ë —Ä–∞–∑',
            reply_markup=keyboard  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        await GetInfo.city.set()

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        await message.reply(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboard  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
        await GetInfo.city.set()


@dp.message_handler(lambda c: c.text.startswith("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"))
async def set_language(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons, *back_button)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message_handler(lambda msg: msg.text in {'–†—É—Å—Å–∫–∏–π', 'English', 'Fran√ßais', 'Espa√±ol'})
async def language_chosen(message: types.Message):
    lang_map = {
        '–†—É—Å—Å–∫–∏–π': 'ru',
        'English': 'en',
        'Fran√ßais': 'fr',
        'Espa√±ol': 'es'
    }
    user_languages[message.from_user.id] = lang_map[message.text]
    await message.reply(f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {message.text}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def back_to_start(message: types.Message):
    await send_welcome(message)


@dp.message_handler(lambda msg: msg.text in genres or msg.text in years or msg.text == "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
async def send_movies(message: types.Message):
    try:
        if message.text == "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º":
            genre = random.choice(genres)
            text, image = await get_random_movies_by_genre_sync(genre)
        elif message.text.lower() in genres:
            genre = message.text.lower()
            text, image = await get_random_movies_by_genre_sync(genre)
        elif message.text.lower() in years:
            year = message.text.lower()
            text, image = await get_random_movies_by_year_range_sync(year)
        else:
            await send_welcome(message)
            return

        if not text:
            return

        await message.answer_photo(photo=image, caption=text)
    except:
        await send_movies(message)


@dp.message_handler(lambda msg: msg.text == "‚Ü© –ù–∞–∑–∞–¥")
async def back_to_start(message: types.Message):
    await send_welcome(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    if message.text in {'–†—É—Å—Å–∫–∏–π', 'English', 'Fran√ßais', 'Espa√±ol'}:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text_to_translate = message.text

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    translated_text = translate_text(text_to_translate, message.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(translated_text)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
